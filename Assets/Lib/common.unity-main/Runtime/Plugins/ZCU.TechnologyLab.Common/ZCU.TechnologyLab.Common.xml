<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZCU.TechnologyLab.Common</name>
    </assembly>
    <members>
        <member name="T:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection">
            <summary>
            Interface for access to server functions and callbacks.
            </summary>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.OnGetAllWorldObjects(System.Action{System.Collections.Generic.List{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto}})">
            <summary>
            Triggers provided action when <see cref="!:GetAllWorldObjects"/> method is called on a sever.
            </summary>
            <param name="callback">Triggered action.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.OnAddWorldObject(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto})">
            <summary>
            Triggers provided action when <see cref="!:AddWorldObject"/> method is called on a server.
            </summary>
            <param name="callback">Triggered callback.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.OnSetWorldObjectProperties(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertiesDto})">
            <summary>
            Triggers provided action when <see cref="!:SetWorldObjectProperties"/> method is called on a sever.
            </summary>
            <param name="callback">Triggered action.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.OnSetWorldObjectProperty(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertyDto})">
            <summary>
            Triggers provided action when <see cref="!:SetWorldObjectProperty"/> method is called on a sever.
            </summary>
            <param name="callback">Triggered action.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.OnRemoveWorldObject(System.Action{System.String})">
            <summary>
            Triggers provided action when <see cref="!:RemoveWorldObject"/> method is called on a sever.
            </summary>
            <param name="callback">Triggered action.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.OnTransformWorldObject(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto})">
            <summary>
            Triggers provided action when <see cref="!:TransformWorldObject"/> method is called on a sever.
            </summary>
            <param name="callback">Triggered action.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.OnUpdateWorldObject(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto})">
            <summary>
            Triggers provided action when <see cref="!:UpdateWorldObject"/> method is called on a sever.
            </summary>
            <param name="callback">Triggered action.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.GetAllWorldObjectsAsync">
            <summary>
            Calls <see cref="!:GetAllWorldObjects"/> method on a server.
            Method will return all world objects via <see cref="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.OnGetAllWorldObjects(System.Action{System.Collections.Generic.List{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto}})"/> callback.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.AddWorldObjectAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto)">
            <summary>
            Calls <see cref="!:AddWorldObject"/> method on a server.
            Method adds a world object on a server and the server tells other clients about the change.
            </summary>
            <param name="worldObject">Object that should be added.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.RemoveWorldObjectAsync(System.String)">
            <summary>
            Calls <see cref="!:RemoveWorldObject"/> method on a server.
            Method removes a world object on a server and the server tells other clients about the change.
            </summary>
            <param name="objectName">Object that should be removed.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.SetWorldObjectPropertiesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Calls <see cref="!:SetWorldObjectProperties"/> method on a server.
            Method changes properties of a world object on a server and the server tells other clients about the change.
            </summary>
            <param name="objectName">Name of an object that should have its properties updated.</param>
            <param name="properties">New properties.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.SetWorldObjectPropertiesAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertiesDto)">
            <summary>
            Calls <see cref="!:SetWorldObjectProperties"/> method on a server.
            Method changes properties of a world object on a server and the server tells other clients about the change.
            </summary>
            <param name="worldObjectProperties">DTO that contains informations about object and properties.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.SetWorldObjectPropertyAsync(System.String,System.String,System.String)">
            <summary>
            Calls <see cref="!:SetWorldObjectProperty"/> method on a server.
            Method changes value of a property of a world object on a server and the server tells other clients about the change.
            </summary>
            <param name="objectName">Name of an object that should have a property updated.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="property">Value of the property.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.SetWorldObjectPropertyAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertyDto)">
            <summary>
            Calls <see cref="!:SetWorldObjectProperty"/> method on a server.
            Method changes value of a property of a world object on a server and the server tells other clients about the change.
            </summary>
            <param name="worldObjectProperty">DTO that contains informations about object and property.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.TransformWorldObjectAsync(System.String,ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto,ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto,ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto)">
            <summary>
            Calls <see cref="!:TransformWorldObject"/> method on a server.
            Method transforms a world object on a server and the server tells other clients about the change.
            </summary>
            <param name="objectName">Name of an object that should be transformed.</param>
            <param name="position">Position.</param>
            <param name="rotation">Euler angles rotation around axis.</param>
            <param name="scale">Scale.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.TransformWorldObjectAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto)">
            <summary>
            Calls <see cref="!:TransformWorldObject"/> method on a server.
            Method transforms a world object on a server and the server tells other clients about the change.
            </summary>
            <param name="worldObjectTransform">DTO that contains informations about object and transform.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.IVirtualWorldServerConnection.UpdateWorldObjectAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto)">
            <summary>
            Calls <see cref="!:UpdateWorldObject"/> method on a server.
            </summary>
            <param name="worldObject">World object that should be updated.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Connections.Session.ISessionClient">
            <summary>
            The session client interface. It allows to control a state of the session via starting and stopping. 
            It also provides methods that register and release a callback, 
            which is called when someone triggers a method on the other side of the session.
            Last functionality the interface provides is triggering a method on the other side of the session.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Connections.Session.ISessionClient.SessionState">
            <summary>
            Returns a state the session is in.
            </summary>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.ISessionClient.StartSessionAsync">
            <summary>
            Starts the session.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.ISessionClient.StopSessionAsync">
            <summary>
            Stops the session.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.ISessionClient.RegisterCallback``1(System.String,System.Action{``0})">
            <summary>
            Registers a callback to the session. When the method with the provided name is called the action is invoked.
            </summary>
            <typeparam name="T">Type of method parameter.</typeparam>
            <param name="method">Name of a method that the session should listen to.</param>
            <param name="callback">Callback action.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.ISessionClient.UnregisterCallback(System.String)">
            <summary>
            Unregisters the method.
            </summary>
            <param name="method">Name of a metod that should be removed.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.ISessionClient.SendMessageAsync(System.String,System.Object[])">
            <summary>
            Send message via the session. The other side should listen to the name provided in the parameter.
            </summary>
            <param name="method">Name of a method that should be callen on the other side of the session.</param>
            <param name="args">Arguments of the method.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Connections.Session.SessionState">
            <summary>
            State of a session.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.Session.SessionState.Starting">
            <summary>
            Session is starting, but it have not connected to a server yet.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.Session.SessionState.Connected">
            <summary>
            Session is started and connected.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.Session.SessionState.Reconnecting">
            <summary>
            Session is reconnecting to a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.Session.SessionState.Closing">
            <summary>
            Session is closing (disconnecting from a server).
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.Session.SessionState.Closed">
            <summary>
            Session is closed.
            </summary>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession">
            <summary>
            A session that uses SignalR library to establish a connection to a server.
            </summary>
        </member>
        <member name="E:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.Disconnected">
            <summary>
            Event called when session disconnects.
            </summary>
        </member>
        <member name="E:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.Reconnecting">
            <summary>
            Event called when session is reconnecting.
            </summary>
        </member>
        <member name="E:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.Reconnected">
            <summary>
            Event called when session reconnects.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.connection">
            <summary>
            SignalR connection.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.SessionState">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.#ctor(System.String,System.String)">
            <summary>
            Creates a new SignalR session.
            </summary>
            <param name="url">Url of a server.</param>
            <param name="hub">Name of a hub on the server.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.StartSessionAsync">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.StopSessionAsync">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.RegisterCallback``1(System.String,System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.UnregisterCallback(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.SendMessageAsync(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.Connection_Closed(System.Exception)">
            <summary>
            Handles an event when the connection is closed. It changes a state of the session.
            </summary>
            <param name="ex">Throwed exception that caused the closing.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.Connection_Reconnected(System.String)">
            <summary>
            Handles an event when the connection is reconnected. It changes a state of the session.
            </summary>
            <param name="arg">New connection id.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.Session.SignalRSession.Connection_Reconnecting(System.Exception)">
            <summary>
            Handles an event when the connection is reconected. It changes a state of the session.
            </summary>
            <param name="ex">Throwed exception that caused the reconnection.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection">
            <summary>
            Class that is working like and adapter that uses a provided session to access methods on a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.AddWorldObject">
            <summary>
            Name of <see cref="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.AddWorldObject"/> method on a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.RemoveWorldObject">
            <summary>
            Name of <see cref="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.RemoveWorldObject"/> method on a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.SetWorldObjectProperties">
            <summary>
            Name of <see cref="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.SetWorldObjectProperties"/> method on a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.SetWorldObjectProperty">
            <summary>
            Name of <see cref="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.SetWorldObjectProperty"/> method on a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.TransformWorldObject">
            <summary>
            Name of <see cref="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.TransformWorldObject"/> method on a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.UpdateWorldObject">
            <summary>
            Name of <see cref="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.UpdateWorldObject"/> method on a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.GetAllWorldObjects">
            <summary>
            Name of <see cref="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.GetAllWorldObjects"/> method on a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.sessionClient">
            <summary>
            A session client.
            </summary>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.#ctor(ZCU.TechnologyLab.Common.Connections.Session.ISessionClient)">
            <summary>
            Creates a new instance of a connection to a virtual world server.
            </summary>
            <param name="sessionClient">A session that is connecting to the sever.</param>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.OnGetAllWorldObjects(System.Action{System.Collections.Generic.List{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto}})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.OnAddWorldObject(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.OnSetWorldObjectProperties(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertiesDto})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.OnSetWorldObjectProperty(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertyDto})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.OnRemoveWorldObject(System.Action{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.OnTransformWorldObject(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.OnUpdateWorldObject(System.Action{ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.GetAllWorldObjectsAsync">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.AddWorldObjectAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto)">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.RemoveWorldObjectAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.SetWorldObjectPropertiesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.SetWorldObjectPropertiesAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertiesDto)">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.SetWorldObjectPropertyAsync(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.SetWorldObjectPropertyAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertyDto)">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.TransformWorldObjectAsync(System.String,ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto,ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto,ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto)">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.TransformWorldObjectAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto)">
            <inheritdoc/>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Connections.VirtualWorldServerConnection.UpdateWorldObjectAsync(ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto)">
            <inheritdoc/>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto">
            <summary>
            Three dimensional float vector.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.RemoteVectorDto.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto">
            <summary>
            An object that can be placed in the virtual world.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto.Name">
            <summary>
            Gets and sets a name of this object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto.Position">
            <summary>
            Gets and sets a world space position of this object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto.Rotation">
            <summary>
            Gets and sets an euler angle rotation of this object.
            </summary>
            <remarks>
            Euler angles can represent a three dimensional rotation by performing three separate rotations around individual axes.
            </remarks>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto.Scale">
            <summary>
            Gets and sets a scale of this object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto.Type">
            <summary>
            Gets and sets a type of this object.
            </summary>
            <remarks>
            Type of the object depends on clients that connects to the server and all clients should respect all object types.
            For example a scanner client will create a world object with type "PointCloud" and VR client has to be able to process "PointCloud"
            type and render it. Other example could be a camera that sends an object with type "Video" to the server. 
            </remarks>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectDto.Properties">
            <summary>
            Gets and sets properties specific to the type of this object. 
            </summary>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertiesDto">
            <summary>
            Data transfer object that contains properties of an world object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertiesDto.ObjectName">
            <summary>
            Gets and sets a name of an object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertiesDto.Properties">
            <summary>
            Gets and sets properties of an object. 
            </summary>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertyDto">
            <summary>
            Data transfer object that contains a value of a single property of an world object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertyDto.ObjectName">
            <summary>
            Gets and sets a name of an object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertyDto.PropertyName">
            <summary>
            Gets and sets a name of a property.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectPropertyDto.PropertyValue">
            <summary>
            Gets and sets a value of a property.
            </summary>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto">
            <summary>
            Data transfer object that contains a transform of an world object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto.ObjectName">
            <summary>
            Gets and sets a name of an object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto.Position">
            <summary>
            Gets and sets a world space position of an object.
            </summary>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto.Rotation">
            <summary>
            Gets and sets an euler angle rotation of an object.
            </summary>
            <remarks>
            Euler angles can represent a three dimensional rotation by performing three separate rotations around individual axes.
            </remarks>
        </member>
        <member name="P:ZCU.TechnologyLab.Common.Entities.DataTransferObjects.WorldObjectTransformDto.Scale">
            <summary>
            Gets and sets a scale of an object.
            </summary>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer">
            <summary>
            The class serializes and deserializes bitmaps that are sent to server or received from a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.WidthKey">
            <summary>
            Name of width key in dictionary.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.HeightKey">
            <summary>
            Name of height key in dictionary.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.FormatKey">
            <summary>
            Name of format key in dictionary.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.PixelsKey">
            <summary>
            Name of pixels key in dictionary.
            </summary>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.SerializeProperties(System.Int32,System.Int32,System.String,System.Byte[])">
            <summary>
            Serializes a bitmap properties to a dictionary.
            </summary>
            <param name="width">Width of the bitmap.</param>
            <param name="height">Height of the bitmap.</param>
            <param name="format">Pixel format.</param>
            <param name="pixels">Pixels in bytes.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.SerializeWidth(System.Int32)">
            <summary>
            Serializes width.
            </summary>
            <param name="width">The width.</param>
            <returns>Serialized width.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.SerializeHeight(System.Int32)">
            <summary>
            Serializes height.
            </summary>
            <param name="height">The height.</param>
            <returns>Serialized height.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.SerializeFormat(System.String)">
            <summary>
            Serializes pixel format.
            </summary>
            <param name="format">The pixel format.</param>
            <returns>Serialized pixel format.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.SerializePixels(System.Byte[])">
            <summary>
            Serializes pixels.
            </summary>
            <param name="pixels">The pixels.</param>
            <returns>Serialized pixels.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.DeserializeWidth(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deserializes a width of a bitmap from the dictionary.
            </summary>
            <param name="properties">The dictionary of properties.</param>
            <returns>The width.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.DeserializeWidth(System.String)">
            <summary>
            Deserializes a width of a bitmap.
            </summary>
            <param name="width">String width property.</param>
            <returns>Integer width.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.DeserializeHeight(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deserializes a height of a bitmap from the dictionary.
            </summary>
            <param name="properties">The dictionary of properties.</param>
            <returns>The height.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.DeserializeHeight(System.String)">
            <summary>
            Deserializes a height of a bitmap.
            </summary>
            <param name="height">String height property.</param>
            <returns>Integer height.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.DeserializePixels(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deserializes pixels of a bitmap from the dictionary.
            </summary>
            <param name="properties">The dictionary of properties.</param>
            <returns>Pixels.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.BitmapWorldObjectSerializer.DeserializePixels(System.String)">
            <summary>
             Deserializes pixels of a bitmap.
            </summary>
            <param name="pixels">String pixels property.</param>
            <returns>Deserialized array of pixels.</returns>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer">
            <summary>
            The class serializes and deserializes meshes that are sent to server or received from a server.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.PointsKey">
            <summary>
            Name of points key in dictionary.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.IndicesKey">
            <summary>
            Name of indices key in dictionary.
            </summary>
        </member>
        <member name="F:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.PrimitiveKey">
            <summary>
            Name of primitive key in dictionary.
            </summary>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.SerializeProperties(System.Single[],System.Int32[],System.String)">
            <summary>
            Serializes mesh properties to a dictionary.
            </summary>
            <param name="vertices">Vertices of a mesh.</param>
            <param name="indices">Indices of a mesh.</param>
            <param name="primitive">Primitive type.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.SerializeVertices(System.Single[])">
            <summary>
            Serializes vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <returns>Serialized vertices.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.SerializeIndices(System.Int32[])">
            <summary>
            Serializes indices.
            </summary>
            <param name="indices">The indices.</param>
            <returns>Serialized indices.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.DeserializeVertices(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deserializes vertices from properties.
            If vertices are not saved in properties throw an exception.
            </summary>
            <param name="properties">Properties that contain vertices.</param>
            <exception cref="T:System.ArgumentException">Thrown when properties do not contain vertices.</exception>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.DeserializeVertices(System.String)">
            <summary>
            Deserializes vertices from a string.
            </summary>
            <param name="property">String vertices property.</param>
            <returns>Array of vertices.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.DeserializeIndices(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Deserializes indices from properties.
            If triangles are not saved in properties throw an exception.     
            </summary>
            <param name="properties">Properties that contain triangles.</param>
            <exception cref="T:System.ArgumentException">Thrown when properties do not contain triangles.</exception>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.DeserializeIndices(System.String)">
            <summary>
            Deserializes indices from a string.
            </summary>
            <param name="property">String indices property.</param>
            <returns>Array of indices.</returns>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.MeshWorldObjectSerializer.SupportPrimitive(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Checks that primitive set in properties is supported by an application.
            If properties do not contain the primitive, the method throws an exception.
            </summary>
            <param name="properties">Properties that contain the primitive.</param>
            <param name="supportedPrimitives">Searched primitive.</param>
            <exception cref="T:System.ArgumentException">Thrown when properties do not contain the primitive.</exception>
        </member>
        <member name="T:ZCU.TechnologyLab.Common.Serialization.WorldObjectSerializer">
            <summary>
            Abstract class that does a deserialization of world objects.
            </summary>
        </member>
        <member name="M:ZCU.TechnologyLab.Common.Serialization.WorldObjectSerializer.DeserializeProperty``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.String,``0})">
            <summary>
            Deserializes generic property from the dictionary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="key">Key of the property.</param>
            <param name="properties">The dictionary of properties.</param>
            <param name="func">Function that deserializes the property.</param>
            <returns>Deserialized property.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the dictionary does not contain the property.</exception>
        </member>
    </members>
</doc>
